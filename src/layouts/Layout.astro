---
import { ClientRouter } from "astro:transitions";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import LoginRegister from "@components/LoginRegister.astro";
import { getLangFromUrl } from "@i18n/utils";
import { userExistsByID } from "@lib/dbFunctions";

//canonical
//const canonicalURL = new URL(Astro.url.pathname, Astro.site);

//const socialImageURL = new URL("/preview.png", Astro.url);

const lang = getLangFromUrl(Astro.url);

let user_id;
let $user;

if (Astro.cookies.has("user_id")) {
	const getCookie = Astro.cookies.get("user_id");
	user_id = Number(getCookie?.value); // Converte o valor do cookie para número, se necessário

	$user = await userExistsByID(`${user_id}`);
}
console.log($user);

const isStaff = $user?.user_type === "staff" ? "block" : "hidden";

const { title, description, canonical, keywords } = Astro.props;
---

<style is:global>
	:root {
		--background: #f5ded2;
		--color-black: #252420;
		--color-white: #fff;
		--color: #f7b785;
		--color2: #efb577;
		--color3: #dfb25c;
		--color4: #a99c5e;
		--color5: #849474;
	}

	html,
	body {
		background-color: var(--background);
		color: var(--color-black);

		margin: 0;
		width: 100%;
		height: 100%;

		font-family: system-ui, sans-serif;
		scrollbar-color: var(--color-black), var(--color);
		transition:
			background-color 0.3s ease,
			color 0.3s ease;
	}

	::-webkit-scrollbar {
		display: none;
	}

	h1,
	h2 {
		position: relative;
		font-weight: bolder;
		text-transform: capitalize;
		letter-spacing: 2px;

		margin: 0;
	}

	h1 {
		font-size: 8em;
	}

	h2 {
		font-size: larger;
	}

	h3 {
		font-size: x-large;
	}

	header,
	footer {
		background-color: var(--color5);
		height: 5rem;

		span,
		p {
			color: var(--color-white);
		}
	}

	a {
		color: var(--color-white);
		text-decoration: none;
		font-weight: bolder;
		cursor: pointer;

		&:hover {
			color: var(--color-black);
		}
	}

	.link {
		color: #0088ff;
	}

	p {
		text-align: left;
		line-height: 1.7em;
		text-wrap: pretty;
	}

	button {
		&:hover {
			color: var(--background);
		}
	}
</style>

<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />

		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="canonical" href={canonical} />
		<!-- <link rel="canonical" href={canonicalURL} />
		<meta property="og:image" content={socialImageURL} /> -->

		<title>{title}</title>
		<ClientRouter />
	</head>
	<body class="grid min-h-screen grid-rows-[auto_1fr_auto]">
		<!-- Modais -->
		<LoginRegister />
		<Header user={$user} isStaff={isStaff} />
		<main>
			<slot />
		</main>
		<Footer />
		<script src="node_modules/flowbite/dist/flowbite.min.js"></script>
	</body>
</html>

<script is:inline define:vars={{ $user }}>
	console.log($user);
	async function verifyUserData() {
		const userData = JSON.parse(sessionStorage.getItem("User") || "{}");

		if (userData.user_id) {
			try {
				const response = await fetch("/api/get-user-by-id", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ user_id: userData.user_id }),
				});

				if (!response.ok) {
					const result = await response.json();
					sessionStorage.removeItem("User");
					console.error(result.message || "This user doesn't exist.");
					document.cookie =
						"user_id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; // Remove o cookie
					return false;
				}

				// Se o utilizador for válido, cria o cookie
				document.cookie = `user_id=${userData.user_id}; path=/; max-age=1800;`; // 1 hora
				return true;
			} catch (error) {
				console.error("Error verifying user:", error);
				sessionStorage.removeItem("User");
				document.cookie =
					"user_id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; // Remove o cookie
				alert("Server error.");
				return false;
			}
		} else {
			sessionStorage.removeItem("User");
			document.cookie =
				"user_id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; // Remove o cookie
			return false;
		}
	}

	(async () => {
		await verifyUserData();
	})();
</script>

<script define:vars={{ $user }}>
	alert($user);
</script>
